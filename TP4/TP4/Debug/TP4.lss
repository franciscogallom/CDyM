
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800106  00800106  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f7  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b15  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6a  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00002ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000451  00000000  00000000  00003a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00003eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_18>
  4c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
void ADC_Enable() {
	ADCSRA |= (1<<ADEN);	// Habilitar conversor ADC 
}

void ADC_Disable() {
	ADCSRA &= ~(1<<ADEN); // Deshabilitar conversor ADC
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret

000000d8 <ADC_Enable>:
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <ADC_Start_Conversion>:
}

void ADC_Start_Conversion() {
	ADCSRA |= (1<<ADSC); // Start conversion
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <ADC_GetResult>:
}

uint16_t ADC_GetResult() {
	uint16_t aux = ADC;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return aux;
}
  f8:	08 95       	ret

000000fa <LED_Update>:

const uint8_t RED_BRIGHT = 250;	
const uint8_t BLUE_BRIGHT = 0;	
const uint8_t GREEN_BRIGHT = 0;

void LED_Update(uint8_t value, char *color){
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	18 2f       	mov	r17, r24
 102:	eb 01       	movw	r28, r22

		// Modificar brillo del ROJO
		if (strcmp(color, "R") == 0) {
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	ce 01       	movw	r24, r28
 10a:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 10e:	89 2b       	or	r24, r25
 110:	21 f4       	brne	.+8      	; 0x11a <LED_Update+0x20>
			set_pwm_soft_value(value );
 112:	81 2f       	mov	r24, r17
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 73 01 	call	0x2e6	; 0x2e6 <set_pwm_soft_value>
		}

		// Modificar brillo del VERDE		
		if (strcmp(color, "G") == 0) { 
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 124:	89 2b       	or	r24, r25
 126:	31 f4       	brne	.+12     	; 0x134 <LED_Update+0x3a>
			OCR1B = value;
 128:	81 2f       	mov	r24, r17
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 130:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		}
		
		// Modificar brillo del AZUL
		if (strcmp(color, "B") == 0) { 
 134:	64 e0       	ldi	r22, 0x04	; 4
 136:	71 e0       	ldi	r23, 0x01	; 1
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 13e:	89 2b       	or	r24, r25
 140:	31 f4       	brne	.+12     	; 0x14e <LED_Update+0x54>
			OCR1A = value;
 142:	81 2f       	mov	r24, r17
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}	
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	08 95       	ret

00000156 <main>:
#define PWM_START DDRB |= (1<<PORTB5)
#define PIN_RED PORTB5
#define PIN_GREEN PORTB2
#define PIN_BLUE PORTB1

int main(void) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	static uint16_t ADC_result;
	static uint8_t value;
	char color[1];
	
	TIMER1_INIT();
 160:	0e 94 2d 01 	call	0x25a	; 0x25a <TIMER1_INIT>
	ADC_Init();
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	ADC_Enable();
 168:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_Enable>
	PWM_START;
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	84 b9       	out	0x04, r24	; 4

	sei();	
 172:	78 94       	sei
	SerialPort_Init(BR9600); 			// Inicializo formato 8N1 y BAUDRATE = 9600bps
 174:	87 e6       	ldi	r24, 0x67	; 103
 176:	0e 94 0b 01 	call	0x216	; 0x216 <SerialPort_Init>
	SerialPort_TX_Enable();				// Activo el Transmisor del Puerto Serie
 17a:	0e 94 15 01 	call	0x22a	; 0x22a <SerialPort_TX_Enable>
	SerialPort_RX_Enable();				// Activo el Receptor del Puerto Serie
 17e:	0e 94 21 01 	call	0x242	; 0x242 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
 182:	0e 94 27 01 	call	0x24e	; 0x24e <SerialPort_RX_Interrupt_Enable>
	
	ADC_Start_Conversion();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
	
    while (1) { 
		while((ADCSRA&(1<<ADIF)) == 0); // Esperar que termine la conversion
 18a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 18e:	84 ff       	sbrs	r24, 4
 190:	fc cf       	rjmp	.-8      	; 0x18a <main+0x34>
		ADCSRA |= (1<<ADIF);
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	80 83       	st	Z, r24
		ADC_result = ADC_GetResult(); 
 19c:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_GetResult>
		value = ADC_result >> 2; // De 10 a 8 bits
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		PWM_soft_update();
 1ac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <PWM_soft_update>
		UART_Update();
 1b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_Update>
			
		if (UART_Get_Flag() == 1) {
 1b4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <UART_Get_Flag>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	51 f5       	brne	.+84     	; 0x210 <main+0xba>
			UART_Set_flag(0);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <UART_Set_flag>
			strcpy(color, UART_Get_String_From_Buffer());
 1c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_Get_String_From_Buffer>
 1c8:	bc 01       	movw	r22, r24
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <strcpy>
			if (strcmp(color, "R") == 0 || strcmp(color, "G") == 0 || strcmp(color, "B") == 0) {
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 1de:	89 2b       	or	r24, r25
 1e0:	81 f0       	breq	.+32     	; 0x202 <main+0xac>
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	71 e0       	ldi	r23, 0x01	; 1
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 1ee:	89 2b       	or	r24, r25
 1f0:	41 f0       	breq	.+16     	; 0x202 <main+0xac>
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 df 01 	call	0x3be	; 0x3be <strcmp>
 1fe:	89 2b       	or	r24, r25
 200:	39 f4       	brne	.+14     	; 0x210 <main+0xba>
				LED_Update(value, color);
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 20c:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_Update>
			}
		}
		
		ADC_Start_Conversion();	
 210:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Start_Conversion>
    }
 214:	ba cf       	rjmp	.-140    	; 0x18a <main+0x34>

00000216 <SerialPort_Init>:
 216:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 21a:	96 e0       	ldi	r25, 0x06	; 6
 21c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 220:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 224:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 228:	08 95       	ret

0000022a <SerialPort_TX_Enable>:
 22a:	e1 ec       	ldi	r30, 0xC1	; 193
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 60       	ori	r24, 0x08	; 8
 232:	80 83       	st	Z, r24
 234:	08 95       	ret

00000236 <SerialPort_TX_Interrupt_Enable>:
 236:	e1 ec       	ldi	r30, 0xC1	; 193
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <SerialPort_RX_Enable>:
 242:	e1 ec       	ldi	r30, 0xC1	; 193
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret

0000024e <SerialPort_RX_Interrupt_Enable>:
 24e:	e1 ec       	ldi	r30, 0xC1	; 193
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 68       	ori	r24, 0x80	; 128
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <TIMER1_INIT>:
void set_ocr1a(uint8_t value){
	OCR1A = value;
}

void set_ocr1b(uint8_t value){
	OCR1B = value;
 25a:	e0 e8       	ldi	r30, 0x80	; 128
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	81 60       	ori	r24, 0x01	; 1
 262:	80 83       	st	Z, r24
 264:	a1 e8       	ldi	r26, 0x81	; 129
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	8c 91       	ld	r24, X
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	8c 93       	st	X, r24
 26e:	80 81       	ld	r24, Z
 270:	80 68       	ori	r24, 0x80	; 128
 272:	80 83       	st	Z, r24
 274:	80 81       	ld	r24, Z
 276:	80 62       	ori	r24, 0x20	; 32
 278:	80 83       	st	Z, r24
 27a:	8c 91       	ld	r24, X
 27c:	83 60       	ori	r24, 0x03	; 3
 27e:	8c 93       	st	X, r24
 280:	84 b1       	in	r24, 0x04	; 4
 282:	84 60       	ori	r24, 0x04	; 4
 284:	84 b9       	out	0x04, r24	; 4
 286:	84 b1       	in	r24, 0x04	; 4
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	84 b9       	out	0x04, r24	; 4
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 294:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 298:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 29c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2a0:	08 95       	ret

000002a2 <PWM_soft_update>:
 2a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PWM_position.1618>
 2a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <PWM_position.1618+0x1>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <PWM_position.1618+0x1>
 2b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <PWM_position.1618>
 2b4:	8f 3f       	cpi	r24, 0xFF	; 255
 2b6:	91 05       	cpc	r25, r1
 2b8:	40 f0       	brcs	.+16     	; 0x2ca <PWM_soft_update+0x28>
 2ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <PWM_position.1618+0x1>
 2be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <PWM_position.1618>
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	08 95       	ret
 2ca:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <PWM_DELTA>
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	82 17       	cp	r24, r18
 2d2:	93 07       	cpc	r25, r19
 2d4:	20 f4       	brcc	.+8      	; 0x2de <PWM_soft_update+0x3c>
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	8f 7d       	andi	r24, 0xDF	; 223
 2da:	85 b9       	out	0x05, r24	; 5
 2dc:	08 95       	ret
 2de:	85 b1       	in	r24, 0x05	; 5
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	85 b9       	out	0x05, r24	; 5
 2e4:	08 95       	ret

000002e6 <set_pwm_soft_value>:
}

void set_pwm_soft_value(uint8_t value){
	PWM_DELTA = value;
 2e6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <PWM_DELTA>
 2ea:	08 95       	ret

000002ec <UART_Get_String_From_Buffer>:
void UART_Send_String_To_Transmit(char* string_pointer){
	while(flagTX);
	flagTX = 1;
	lengthCadena = strlen(string_pointer);
	strcpy(TX_String_Buffer, string_pointer);
	SerialPort_TX_Interrupt_Enable();
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	08 95       	ret

000002f2 <UART_Get_Flag>:
} 
 
// Flag para chequear si se recibio un input por la terminal
uint8_t UART_Get_Flag(){
	return flagMEF;
}
 2f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <flagMEF>
 2f6:	08 95       	ret

000002f8 <UART_Set_flag>:

void UART_Set_flag(uint8_t value){
	flagMEF = value;
 2f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <flagMEF>
 2fc:	08 95       	ret

000002fe <UART_Update>:
}

void UART_Update(){	
	if(flagD){ // Recepción NO Bloqueante
 2fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flagD>
 302:	88 23       	and	r24, r24
 304:	a1 f0       	breq	.+40     	; 0x32e <UART_Update+0x30>
		strcpy(TX_String_Buffer, RX_String_Buffer);
 306:	60 e1       	ldi	r22, 0x10	; 16
 308:	71 e0       	ldi	r23, 0x01	; 1
 30a:	82 e4       	ldi	r24, 0x42	; 66
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <strcpy>
		flagTX = 1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flagTX>
		SerialPort_TX_Interrupt_Enable();
 318:	0e 94 1b 01 	call	0x236	; 0x236 <SerialPort_TX_Interrupt_Enable>
		while (flagTX);
 31c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flagTX>
 320:	81 11       	cpse	r24, r1
 322:	fc cf       	rjmp	.-8      	; 0x31c <UART_Update+0x1e>
		flagMEF = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <flagMEF>
		flagD = 0;
 32a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <flagD>
 32e:	08 95       	ret

00000330 <__vector_18>:
	}
}

// Recepcion
ISR(USART_RX_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
	RX_Buffer = UDR0; // La lectura del UDR borra flag RXC
 33c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 340:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RX_Buffer>
	RX_String_Buffer[0] = RX_Buffer;
 344:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RX_Buffer>
 348:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <RX_String_Buffer>
	flagD = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flagD>
}
 352:	8f 91       	pop	r24
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__vector_19>:

// Transmision
ISR(USART_UDRE_vect){
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	UDR0 = TX_String_Buffer[readIndex];
 36e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <readIndex>
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ee 5b       	subi	r30, 0xBE	; 190
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	80 81       	ld	r24, Z
 37a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	readIndex++;
 37e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <readIndex>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <readIndex>
	if(lengthCadena == 0){
 388:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lengthCadena>
 38c:	81 11       	cpse	r24, r1
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <__vector_19+0x4a>
		readIndex = 0;
 390:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <readIndex>
		lengthCadena = 0;
 394:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lengthCadena>
		flagTX = 0;
 398:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <flagTX>
		UCSR0B &=~(1<<UDRIE0); // Deshabilito interrupcion
 39c:	e1 ec       	ldi	r30, 0xC1	; 193
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 7d       	andi	r24, 0xDF	; 223
 3a4:	80 83       	st	Z, r24
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <__vector_19+0x50>
	} else {
		lengthCadena--;
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lengthCadena>
	}	
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <strcmp>:
 3be:	fb 01       	movw	r30, r22
 3c0:	dc 01       	movw	r26, r24
 3c2:	8d 91       	ld	r24, X+
 3c4:	01 90       	ld	r0, Z+
 3c6:	80 19       	sub	r24, r0
 3c8:	01 10       	cpse	r0, r1
 3ca:	d9 f3       	breq	.-10     	; 0x3c2 <strcmp+0x4>
 3cc:	99 0b       	sbc	r25, r25
 3ce:	08 95       	ret

000003d0 <strcpy>:
 3d0:	fb 01       	movw	r30, r22
 3d2:	dc 01       	movw	r26, r24
 3d4:	01 90       	ld	r0, Z+
 3d6:	0d 92       	st	X+, r0
 3d8:	00 20       	and	r0, r0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <strcpy+0x4>
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
